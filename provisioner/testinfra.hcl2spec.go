// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package testinfra

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	InstallCmd []string `mapstructure:"install_cmd" cty:"install_cmd" hcl:"install_cmd"`
	Keyword    *string  `mapstructure:"keyword" cty:"keyword" hcl:"keyword"`
	Local      *bool    `mapstructure:"local" cty:"local" hcl:"local"`
	Marker     *string  `mapstructure:"marker" cty:"marker" hcl:"marker"`
	Processes  *int     `mapstructure:"processes" cty:"processes" hcl:"processes"`
	PytestPath *string  `mapstructure:"pytest_path" cty:"pytest_path" hcl:"pytest_path"`
	Sudo       *bool    `mapstructure:"sudo" cty:"sudo" hcl:"sudo"`
	TestFiles  []string `mapstructure:"test_files" cty:"test_files" hcl:"test_files"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"install_cmd": &hcldec.AttrSpec{Name: "install_cmd", Type: cty.List(cty.String), Required: false},
		"keyword":     &hcldec.AttrSpec{Name: "keyword", Type: cty.String, Required: false},
		"local":       &hcldec.AttrSpec{Name: "local", Type: cty.Bool, Required: false},
		"marker":      &hcldec.AttrSpec{Name: "marker", Type: cty.String, Required: false},
		"processes":   &hcldec.AttrSpec{Name: "processes", Type: cty.Number, Required: false},
		"pytest_path": &hcldec.AttrSpec{Name: "pytest_path", Type: cty.String, Required: false},
		"sudo":        &hcldec.AttrSpec{Name: "sudo", Type: cty.Bool, Required: false},
		"test_files":  &hcldec.AttrSpec{Name: "test_files", Type: cty.List(cty.String), Required: false},
	}
	return s
}
